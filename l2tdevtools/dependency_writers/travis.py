# -*- coding: utf-8 -*-
"""Writers for Travis-CI script files."""

from __future__ import unicode_literals

import os

from l2tdevtools.dependency_writers import interface


class TravisInstallScriptWriter(interface.DependencyFileWriter):
  """Travis-CI install.sh file writer."""

  PATH = os.path.join('config', 'travis', 'install.sh')

  _URL_L2TDEVTOOLS = 'https://github.com/log2timeline/l2tdevtools.git'

  _FILE_HEADER = [
      '#!/bin/bash',
      '#',
      '# Script to set up Travis-CI test VM.',
      '#',
      ('# This file is generated by l2tdevtools update-dependencies.py any '
       'dependency'),
      '# related changes should be made in dependencies.ini.',
      '']  # yapf: disable

  _FILE_FOOTER = [
      '',
      '# Exit on error.',
      'set -e;',
      '',
      'if test ${TRAVIS_OS_NAME} = "osx";',
      'then',
      '\tgit clone https://github.com/log2timeline/l2tbinaries.git -b dev;',
      '',
      '\tmv l2tbinaries ../;',
      '',
      '\tfor PACKAGE in ${L2TBINARIES_DEPENDENCIES};',
      '\tdo',
      '\t\techo "Installing: ${PACKAGE}";',
      '\t\tsudo /usr/bin/hdiutil attach ../l2tbinaries/macos/${PACKAGE}-*.dmg;',
      ('\t\tsudo /usr/sbin/installer -target / -pkg '
       '/Volumes/${PACKAGE}-*.pkg/${PACKAGE}-*.pkg;'),
      '\t\tsudo /usr/bin/hdiutil detach /Volumes/${PACKAGE}-*.pkg',
      '\tdone',
      '',
      '\tfor PACKAGE in ${L2TBINARIES_TEST_DEPENDENCIES};',
      '\tdo',
      '\t\techo "Installing: ${PACKAGE}";',
      '\t\tsudo /usr/bin/hdiutil attach ../l2tbinaries/macos/${PACKAGE}-*.dmg;',
      ('\t\tsudo /usr/sbin/installer -target / -pkg '
       '/Volumes/${PACKAGE}-*.pkg/${PACKAGE}-*.pkg;'),
      '\t\tsudo /usr/bin/hdiutil detach /Volumes/${PACKAGE}-*.pkg',
      '\tdone',
      '',
      'elif test ${TRAVIS_OS_NAME} = "linux";',
      'then',
      '\tsudo rm -f /etc/apt/sources.list.d/travis_ci_zeromq3-source.list;',
      '',
      '\tsudo add-apt-repository ppa:gift/dev -y;',
      '\tsudo apt-get update -q;',
      '',
      '\tif test ${TRAVIS_PYTHON_VERSION} = "2.7";',
      '\tthen',
      ('\t\tsudo apt-get install -y ${PYTHON2_DEPENDENCIES} '
       '${PYTHON2_TEST_DEPENDENCIES};'),
      '\telse',
      ('\t\tsudo apt-get install -y ${PYTHON3_DEPENDENCIES} '
       '${PYTHON3_TEST_DEPENDENCIES};'),
      '\tfi',
      '\tif test ${TARGET} = "pylint";',
      '\tthen',
      '\t\tsudo apt-get install -y pylint;',
      '\tfi',
      'fi',
      '']  # yapf: disable

  def Write(self):
    """Writes an install.sh file."""
    file_content = []
    file_content.extend(self._FILE_HEADER)

    dependencies = self._dependency_helper.GetL2TBinaries()
    dependencies = ' '.join(dependencies)
    file_content.append(
        'L2TBINARIES_DEPENDENCIES="{0:s}";'.format(dependencies))

    file_content.append('')

    test_dependencies = ['funcsigs', 'mock', 'pbr']
    if 'six' not in dependencies:
      test_dependencies.append('six')

    if self._project_definition.name == 'artifacts':
      test_dependencies.append('yapf')

    test_dependencies = ' '.join(sorted(test_dependencies))
    file_content.append(
        'L2TBINARIES_TEST_DEPENDENCIES="{0:s}";'.format(test_dependencies))

    file_content.append('')

    python2_dependencies = self._dependency_helper.GetDPKGDepends(
        exclude_version=True, python_version=2)
    python2_dependencies = ' '.join(python2_dependencies)
    file_content.append(
        'PYTHON2_DEPENDENCIES="{0:s}";'.format(python2_dependencies))

    file_content.append('')

    test_dependencies = ['python-coverage', 'python-mock', 'python-tox']
    if self._project_definition.name == 'artifacts':
      # Note that the artifacts tests will use the Python 2 version of yapf.
      test_dependencies.append('python-yapf')
      test_dependencies.append('yapf')

    test_dependencies = ' '.join(sorted(test_dependencies))
    file_content.append(
        'PYTHON2_TEST_DEPENDENCIES="{0:s}";'.format(test_dependencies))
    file_content.append('')

    python3_dependencies = self._dependency_helper.GetDPKGDepends(
        exclude_version=True, python_version=3)
    python3_dependencies = ' '.join(python3_dependencies)
    file_content.append(
        'PYTHON3_DEPENDENCIES="{0:s}";'.format(python3_dependencies))

    file_content.append('')

    test_dependencies = ['python3-mock', 'python3-setuptools', 'python3-tox']
    if self._project_definition.name == 'artifacts':
      # Note that the artifacts tests will use the Python 2 version of yapf.
      test_dependencies.append('python-yapf')
      test_dependencies.append('yapf')

    test_dependencies = ' '.join(sorted(test_dependencies))
    file_content.append(
        'PYTHON3_TEST_DEPENDENCIES="{0:s}";'.format(test_dependencies))

    file_content.extend(self._FILE_FOOTER)

    file_content = '\n'.join(file_content)
    file_content = file_content.encode('utf-8')

    with open(self.PATH, 'wb') as file_object:
      file_object.write(file_content)


class TravisRunTestsScriptWriter(interface.DependencyFileWriter):
  """Travis-CI runtests.sh file writer."""

  _TEMPLATE_FILE = os.path.join('data', 'templates', 'runtests.sh')

  PATH = os.path.join('config', 'travis', 'runtests.sh')

  def Write(self):
    """Writes a runtests.sh file."""
    paths_to_lint = [self._project_definition.name]
    for path_to_lint in ('config', 'scripts', 'tests', 'tools'):
      if os.path.isdir(path_to_lint):
        paths_to_lint.append(path_to_lint)

    paths_to_lint = sorted(paths_to_lint)
    if os.path.isfile('setup.py'):
      paths_to_lint.insert(0, 'setup.py')

    template_mappings = {
        'project_name': self._project_definition.name,
        'paths_to_lint': ' '.join(paths_to_lint)
    }

    template_file = os.path.join(self._l2tdevtools_path, self._TEMPLATE_FILE)
    file_content = self._GenerateFromTemplate(template_file, template_mappings)

    file_content = file_content.encode('utf-8')

    with open(self.PATH, 'wb') as file_object:
      file_object.write(file_content)


class TravisRunWithTimeoutScriptWriter(interface.DependencyFileWriter):
  """Travis-CI run_with_timeout.sh file writer."""

  _TEMPLATE_FILE = os.path.join('data', 'templates', 'run_with_timeout.sh')

  PATH = os.path.join('config', 'travis', 'run_with_timeout.sh')

  def Write(self):
    """Writes a run_with_timeout.sh file."""
    template_mappings = {}

    template_file = os.path.join(self._l2tdevtools_path, self._TEMPLATE_FILE)
    file_content = self._GenerateFromTemplate(template_file, template_mappings)

    file_content = file_content.encode('utf-8')

    with open(self.PATH, 'wb') as file_object:
      file_object.write(file_content)
